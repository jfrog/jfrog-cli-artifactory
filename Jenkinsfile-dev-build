node("docker-ubuntu20-xlarge") {
    properties([
        pipelineTriggers([
            cron('H 0 * * *')
        ])
    ])
    try {
        stage('Setup Environment and Tools') {
            def goRoot = tool name: 'go-1.23.9', type: 'go'
            withEnv(["GOROOT=${goRoot}", "PATH+GO=${goRoot}/bin"]) {
                withCredentials([string(credentialsId: 'repo21-url', variable: 'REPO21_URL')]) {
                    echo "${REPO21_URL}"
                    def repo21Name = "${REPO21_URL}".substring(8, "${REPO21_URL}".length())
                    env.REPO_NAME_21 = "$repo21Name"
                }

                def reposMap = [
                    "artifactory-jenkins-plugin": [url: "https://github.com/jfrog/jenkins-artifactory-plugin", type: "maven", jdk:"8"],
                    "build-info-extractor": [url: "https://github.com/jfrog/build-info", type: "gradle", jdk:"8"],
                    "teamcity-artifactory-plugin": [url: "https://github.com/jfrog/teamcity-artifactory-plugin.git", type: "maven", jdk:"8"],
                    "artifactory-maven-plugin": [url: "https://github.com/jfrog/artifactory-maven-plugin.git", type: "maven", jdk:"8"],
                    "artifactory-client-java": [url: "https://github.com/jfrog/artifactory-client-java.git", type: "gradle", jdk:"8"],
                    "artifactory-gradle-plugin": [url: "https://github.com/jfrog/artifactory-gradle-plugin.git", type: "gradle", jdk:"8"],
                    "file-specs-java": [url: "https://github.com/jfrog/file-specs-java.git", type: "gradle", jdk:"8"],
                    "jfrog-testing-infra": [url: "https://github.com/jfrog/jfrog-testing-infra.git", type: "gradle", jdk:"8"],
                    "bamboo-artifactory-plugin": [url: "https://github.com/jfrog/bamboo-artifactory-plugin.git", type: "maven", jdk:"11"],
                    "jfrog-plugin": [url: "https://github.com/jenkinsci/jfrog-plugin.git", type: "maven", jdk: "11"],
                    "bamboo-jfrog-plugin": [url: "https://github.com/jfrog/bamboo-jfrog-plugin.git", type: "gradle", jdk: "11"],
                    "jfrog-azure-devops-extension": [url: "https://github.com/jfrog/jfrog-azure-devops-extension.git", type: "npm"],
                    "cocoapods-art": [url: "https://github.com/jfrog/cocoapods-art.git", type: "ruby"],
                    "jfrog-setup-cli": [url: "https://bitbucket.org/jfrog/jfrog-setup-cli.git", type: "docker"]
                ]

                buildStatus = 'SUCCESS'
                cliExecutableName = 'jfrog'
                repo = 'jfrog-cli'
                formattedDate = new Date().format('yyyy-MM-dd')
                env.CI = true
                env.JFROG_CLI_LOG_LEVEL = "DEBUG"
                dir('temp') {
                    sh "cat /etc/lsb-release"
                    cliWorkspace = pwd()
                    sh "echo cliWorkspace=$cliWorkspace"
                    builderDir = "${cliExecutableName}-builder/"
                    sh "mkdir $builderDir"
                    builderPath = "${cliWorkspace}/${builderDir}${cliExecutableName}"
                    jfrogCliRepoDir = "${cliWorkspace}/${repo}/"
                    zippedBinariesDir = "${jfrogCliRepoDir}zippedBinaries/"
                    pluginName = params.PLUGINS_NAME
                    slackChannelName = "ecosytem-plugins-dev-build-notifications"
                    watchName = "ecosystem-watch"
                    pluginSelectedForOnDemandScanning=""
                    stage('Clone Source Repo') {
                        try  {
                            dir("${cliWorkspace}") {
                                sh "git clone https://github.com/jfrog/jfrog-cli.git"
                                dir("${repo}") {
                                    sh "git checkout dev"
                                }
                            }
                        }
                        catch (e) {
                            notifyFailure('Clone Source Repo', e)
                            throw e
                        }
                    }
                    stage('Build JFrog CLI') {
                        try  {
                            sh 'go version'
                            dir("$jfrogCliRepoDir") {
                                sh "build/build.sh $cliExecutableName"
                            }
                            sh "mv $jfrogCliRepoDir/$cliExecutableName $builderDir"
                            version = getCliVersion(builderPath)
                            print "CLI version: $version"
                        }
                        catch (e) {
                            notifyFailure('Build JFrog CLI', e)
                            throw e
                        }
                    }
                    stage('Select Plugins for execution'){
                        try  {
                        script{
                            selectPlugins(reposMap)
                            }
                        }
                        catch (e) {
                            notifyFailure('Select Plugins for execution', e)
                            throw e
                        }
                    }
                    stage('Installing Tools'){
                        script {
                            if(pluginSelectedForOnDemandScanning!="all"){
                                repoDetails=reposMap[pluginSelectedForOnDemandScanning]
                            }
                            def jdk = tool name: 'jdk-11'
                            withEnv(["JAVA_HOME=${jdk}", "PATH+JAVA=${jdk}/bin"]) {
                                sh 'java -version'
                            }
                            jdk = installJava("8")
                            withEnv(["JAVA_HOME=${jdk}", "PATH+JAVA=${jdk}/bin"]) {
                                sh 'java -version'
                            }
                        }
                    }
                }
            }
        }
    } catch (e) {
        echo "ERROR: Pipeline failed with exception: ${e}"
        buildStatus = 'FAILURE'
        throw e
    }
    finally {
        stage('Send Notifications') {
            message = ''
            if (buildStatus == 'SUCCESS') {
                message = "Dev Build Jenkins Pipeline for Jfrog-CLI has successfully completed.\n<${env.BUILD_URL}|View Build>"
                slackSend(channel: "#${slackChannelName}", message: message, color: 'good')
            } else {
                message = """@here Dev Build Jenkins Pipeline has a problem.
                    *Status* : *${buildStatus}*.
                    *Build* : <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}>
                   """
                slackSend(channel: "#${slackChannelName}", message: message, color: 'danger')
            }
            echo "Final notification message would be: \n${message}"
        }
    }
}

def notifyFailure(String stageName, error) {
    def message = """@here :x: *Build FAILED!*
    *Job:* `${env.JOB_NAME}` #${env.BUILD_NUMBER}
    *Failed Stage:* `${stageName}`
    *Error:* `${error.message.trim()}`
    *<${env.BUILD_URL}|Open Build Log>*"""
    echo "Sending failure notification for stage: ${stageName}"
    slackSend(
        channel: "#${slackChannelName}",
        color: 'danger',
        message: message
    )
}

def installJava(String version) {
    // Note the escaped '\$NF' for Groovy in the awk command
    def javaHome = sh(script: "update-alternatives --display java | grep 'openjdk-${version}' | head -n1 | awk '{print \$NF}' | sed 's|/bin/java||' || true", returnStdout: true).trim()

    if (javaHome.isEmpty()) {
        println "JDK ${version} not found. Installing..."
        def jdkPackage = "openjdk-${version}-jdk"
        sh "apt-get update -y"
        sh "apt-get install -y ${jdkPackage}"

        // Escape the dollar sign here as well
        javaHome = sh(script: "update-alternatives --display java | grep 'openjdk-${version}' | head -n1 | awk '{print \$NF}' | sed 's|/bin/java||'", returnStdout: true).trim()
    } else {
        println "JDK ${version} is already installed at: ${javaHome}"
    }

    if (javaHome.isEmpty()) {
        error "Could not determine JAVA_HOME for JDK ${version}."
    }
    return javaHome
}

def selectPlugins(Map reposMap) {
    def buildCauses = currentBuild.getBuildCauses()

    def timerCause = buildCauses.find { it instanceof hudson.triggers.TimerTrigger$TimerTriggerCause }
    if (!timerCause) {
        pluginSelectedForOnDemandScanning=pluginName
    } else {
        pluginSelectedForOnDemandScanning="all"
    }
}

def installMaven() {
    sh 'apt-get install -y maven'
    sh 'mvn -v'
}

def getCliVersion(exePath) {
    version = sh(script: "$exePath -v | tr -d 'jfrog version' | tr -d '\n'", returnStdout: true)
    return version
}

def buildAndScanBinary(reposMap) {
    configRepo21()
    try {
        sh "mkdir -p '${zippedBinariesDir}'"
        sh "echo Successfully executed mkdir"
        buildAndScanBinaries(reposMap)
    } finally {
        cleanupRepo21()
    }
}

def configRepo21() {
    withCredentials([
        // jfrog-ignore
        usernamePassword(credentialsId: 'repo21', usernameVariable: 'REPO21_USER', passwordVariable: 'REPO21_PASSWORD'),
        string(credentialsId: 'repo21-url', variable: 'REPO21_URL')
    ]) {
        sh "${builderPath} c add repo21 --url=${REPO21_URL} --user=${REPO21_USER} --password=${REPO21_PASSWORD} --overwrite"
        sh "${builderPath} c use repo21"
    }
}

def cleanupRepo21() {
    sh "${builderPath} c rm repo21 --quiet"
}

def buildAndScanBinaries(Map reposMap) {
    sh "echo Inside buildAndScanBinaries 1"

    reposMap.each { repoName, details ->
        if (details.execute == "false") {
            sh "echo Inside buildAndScanBinaries execute false condition"
            sh "echo 'Skipping ${repoName}'"
            return
        }

        try {
            stage("Build and upload ${repoName}") {
                sh "echo Inside buildAndScanBinaries execute true condition for ${repoName}"
                buildAndUploadByType(repoName, details)
            }
        } catch (e) {
            notifyFailure("Build and upload ${repoName}", e)
            throw e
        }
        scanBinary()
    }
    sh "echo Inside buildAndScanBinaries 2"
}

def uploadBinaryToJfrogRepo21(pkg, fileName) {
    sh """#!/bin/bash
        set -e
        $builderPath rt u ${jfrogCliRepoDir}/binaries/${pkg}/${fileName} ${jfrogCLITargetRepoName}/plugins/dev/${formattedDate}/$identifier/$version/$pkg/ --fail-no-op --flat
        echo Uploaded the binary here: ${jfrogCLITargetRepoName}/plugins/dev/${formattedDate}/$identifier/$version/$pkg/
    """
}

def scanBinary() {
    try  {
        stage("Scanning Binaries under watch ${watchName}"){
            dir("${zippedBinariesDir}"){
                sh "ls -la"
                sh "ls -l '${builderPath}'"
                sh """#!/bin/bash
                    ${builderPath} --version
                    ${builderPath} scan '**/*.zip' --ant=true --watches ${watchName} --format=simple-json
                """
            }
        }
     }
    catch (e) {
        notifyFailure('Scanning Binaries under watch ${watchName}', e)
        throw e
    }
}

def build(goos, goarch, pkg, fileName) {
    dir("${jfrogCliRepoDir}") {
        script {
            def zipName = "${pkg}.zip"
            def sourceDirToZip = "./binaries/${pkg}/"

            withEnv(["GOOS=${goos}", "GOARCH=${goarch}"]) {
                echo "Building for OS: ${goos}, Arch: ${goarch}"
                sh "./build/build.sh ./binaries/${pkg}/$fileName"
            }
            echo "Zipping the output..."
            sh "ls -la binaries/${pkg}/$fileName"
            zip(
                zipFile: zipName,
                dir: "binaries/${pkg}/"
            )

            sh "mv ${zipName} ${zippedBinariesDir}"
        }
    }
}

def buildAndUploadByType(String repoName, Map details) {
    try {
        dir(repoName) {
            sh "git clone ${details.url} ."
            switch (details.type) {
                case "maven":
                    buildPluginBinary(repoName, details)
                    break
                case "gradle":
                    sh "./gradlew clean build -x test"
                    // Add logic to find and upload the binary
                    break
                case "npm":
                    sh "npm install"
                    sh "npm run create" // Or 'npm run build' - check package.json
                    // Add logic to find and upload the binary
                    break
                // Add other cases for ruby, docker, go, etc.
            }
        }
    } catch(e) {
        notifyFailure("Build and Upload ${repoName}", e)
        throw e
    }
}

def buildPluginBinary(repoName, details){
    sh "echo Inside buildPluginBinary '${repoName}'"

    if(repoName=="teamcity-artifactory-plugin"){
        sh 'java -version'
        sh 'mvn clean install -DskipTests'
        sh 'pwd'
        sh 'ls -la'
        def zipFileName = "teamcity-plugin-build.zip"

        echo "Zipping contents of the 'target' directory..."

        // Use the zip step to create the archive
        zip(zipFile: zipFileName, dir: 'target')

        echo "Successfully created ${zipFileName}"
        sh "ls -la ${zipFileName}"
        sh "mv ${zipFileName} ${zippedBinariesDir}"
    }else if(repoName=="bamboo-artifactory-plugin"){
        sh 'apt-get update -y'
        sh 'apt-get install -y openjdk-11-jdk'
        sh 'java -version'
        def jdkHome = '/usr/lib/jvm/java-11-openjdk-amd64'
        withEnv(["JAVA_HOME=${jdkHome}", "PATH+JAVA=${jdkHome}/bin"]) {
            sh 'echo "--- Using JDK 11 ---"'
            sh 'java -version'
            sh 'mvn clean install -DskipTests'
            def zipFileName = "bamboo-artifactory-plugin.zip"

            echo "Zipping contents of the 'target' directory..."

            zip(zipFile: 'bamboo-artifactory-plugin.zip', dir: 'target', glob: '*.jar')

            echo "Successfully created ${zipFileName}"
            sh "ls -la ${zipFileName}"
            sh "mv ${zipFileName} ${zippedBinariesDir}"
        }
    }
}
