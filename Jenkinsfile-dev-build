node("docker-ubuntu20-xlarge") {
    properties([
        pipelineTriggers([
            cron('H 0 * * *')
        ])
    ])
    try {
        stage('Setup Environment and Tools') {
            def goRoot = tool name: 'go-1.23.9', type: 'go'
            withEnv(["GOROOT=${goRoot}", "PATH+GO=${goRoot}/bin"]) {
                withCredentials([string(credentialsId: 'repo21-url', variable: 'REPO21_URL')]) {
                    echo "${REPO21_URL}"
                    def repo21Name = "${REPO21_URL}".substring(8, "${REPO21_URL}".length())
                    env.REPO_NAME_21 = "$repo21Name"
                }

                def reposMap = [
                    "artifactory-jenkins-plugin": [url: "https://github.com/jfrog/jenkins-artifactory-plugin", branch:"master", type: "maven", jdk:"8"],
                    "build-info-extractor": [url: "https://github.com/jfrog/build-info", branch: "master", type: "gradle", jdk:"8"],
                    "teamcity-artifactory-plugin": [url: "https://github.com/jfrog/teamcity-artifactory-plugin.git", branch: "master",  type: "maven", jdk:"8"],
                    "artifactory-maven-plugin": [url: "https://github.com/jfrog/artifactory-maven-plugin.git", branch: "master", type: "maven", jdk:"8"],
                    "artifactory-client-java": [url: "https://github.com/jfrog/artifactory-client-java.git", branch: "master", type: "gradle", jdk:"8"],
                    "artifactory-gradle-plugin": [url: "https://github.com/jfrog/artifactory-gradle-plugin.git", branch: "master", type: "gradle", jdk:"8"],
                    "file-specs-java": [url: "https://github.com/jfrog/file-specs-java.git", branch: "master", type: "gradle", jdk:"8"],
                    "jfrog-testing-infra": [url: "https://github.com/jfrog/jfrog-testing-infra.git", branch: "master", type: "gradle", jdk:"8"],
                    "bamboo-artifactory-plugin": [url: "https://github.com/jfrog/bamboo-artifactory-plugin.git", branch: "master", type: "maven", jdk:"11"],
                    "jfrog-plugin": [url: "https://github.com/jenkinsci/jfrog-plugin.git", branch:"main", type: "maven", jdk:"11"],
                    "bamboo-jfrog-plugin": [url: "https://github.com/jfrog/bamboo-jfrog-plugin.git", branch: "master", type: "gradle", jdk:"11"],
                    "jfrog-azure-devops-extension": [url: "https://github.com/jfrog/jfrog-azure-devops-extension.git",branch: "master", type: "npm"],
                    "cocoapods-art": [url: "https://github.com/jfrog/cocoapods-art.git", branch: "master", type: "ruby"],
                    "jfrog-setup-cli": [url: "https://bitbucket.org/jfrog/jfrog-setup-cli.git", branch: "master", type: "docker"]
                ]

                buildStatus = 'SUCCESS'
                cliExecutableName = 'jfrog'
                repo = 'jfrog-cli'
                formattedDate = new Date().format('yyyy-MM-dd')
                env.CI = true
                env.JFROG_CLI_LOG_LEVEL = "DEBUG"
                dir('temp') {
                    sh "cat /etc/lsb-release"
                    cliWorkspace = pwd()
                    sh "echo cliWorkspace=$cliWorkspace"
                    builderDir = "${cliExecutableName}-builder/"
                    sh "mkdir $builderDir"
                    builderPath = "${cliWorkspace}/${builderDir}${cliExecutableName}"
                    jfrogCliRepoDir = "${cliWorkspace}/${repo}/"
                    zippedBinariesDir = "${jfrogCliRepoDir}zippedBinaries/"
                    pluginName = params.PLUGINS_NAME
                    formattedDate = new Date().format('yyyy-MM-dd')
                    slackChannelName = "ecosytem-plugins-dev-build-notifications"
                    watchName = "ecosystem-watch"
                    pluginSelectedForOnDemandScanning=""
                    stage('Clone Source Repo') {
                        try  {
                            dir("${cliWorkspace}") {
                                sh "git clone https://github.com/jfrog/jfrog-cli.git"
                                dir("${repo}") {
                                    sh "git checkout dev"
                                }
                            }
                        }
                        catch (e) {
                            notifyFailure('Clone Source Repo', e)
                            throw e
                        }
                    }
                    stage('Build JFrog CLI') {
                        try  {
                            sh 'go version'
                            dir("$jfrogCliRepoDir") {
                                sh "build/build.sh $cliExecutableName"
                            }
                            sh "mv $jfrogCliRepoDir/$cliExecutableName $builderDir"
                        }
                        catch (e) {
                            notifyFailure('Build JFrog CLI', e)
                            throw e
                        }
                    }
                    stage('Select Plugins for execution'){
                        try  {
                        script{
                             selectPlugins(reposMap)
                            }
                        }
                        catch (e) {
                            notifyFailure('Select Plugins for execution', e)
                            throw e
                        }
                    }
                    stage('Installing Tools'){
                        script {
                            sh "mkdir -p ${zippedBinariesDir}"
                            sh 'apt-get update -y && apt-get install -y unzip'
                            def mavenVersion = "3.9.6"
                            sh "curl -O https://archive.apache.org/dist/maven/maven-3/${mavenVersion}/binaries/apache-maven-${mavenVersion}-bin.tar.gz"
                            sh "tar -xzf apache-maven-${mavenVersion}-bin.tar.gz"
                            def mvnHome = "${pwd()}/apache-maven-${mavenVersion}"

                            def gradleHomePath = installGradle('8.5')
                            withEnv(["PATH+GRADLE=${gradleHomePath}/bin"]) {
                                sh 'gradle -v'
                            }
                            configRepo21()
                            sh "java -version"
                            def jdk8Path = installJdkFromArchive('8')
                            def tasks = [:]
                            reposMap.each { repoName, details ->
                                tasks[repoName] = {
                                    buildBinaryWithSpecificJDK(repoName, details, mvnHome, jdk8Path)
                                }
                            }
                            parallel(tasks)
                        }
                    }
                }
            }
        }
    } catch (e) {
        echo "ERROR: Pipeline failed with exception: ${e}"
        buildStatus = 'FAILURE'
        throw e
    }
    finally {
        stage('Send Notifications') {
            message = ''
            if (buildStatus == 'SUCCESS') {
                message = "Dev Build Jenkins Pipeline for Jfrog-CLI has successfully completed.\n<${env.BUILD_URL}|View Build>"
                slackSend(channel: "#${slackChannelName}", message: message, color: 'good')
            } else {
                message = """@here Dev Build Jenkins Pipeline has a problem.
                    *Status* : *${buildStatus}*.
                    *Build* : <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}>
                   """
                slackSend(channel: "#${slackChannelName}", message: message, color: 'danger')
            }
            echo "Final notification message would be: \n${message}"
        }
    }
}

def notifyFailure(String stageName, error) {
    def message = """@here :x: *Build FAILED!*
    *Job:* `${env.JOB_NAME}` #${env.BUILD_NUMBER}
    *Failed Stage:* `${stageName}`
    *Error:* `${error.message.trim()}`
    *<${env.BUILD_URL}|Open Build Log>*"""
    echo "Sending failure notification for stage: ${stageName}"
    slackSend(
        channel: "#${slackChannelName}",
        color: 'danger',
        message: message
    )
}

def installJdkFromArchive(String version) {
    def jdkUrlMap = [
        "8": "https://api.adoptium.net/v3/binary/latest/8/ga/linux/x64/jdk/hotspot/normal/eclipse",
        "11": "https://api.adoptium.net/v3/binary/latest/11/ga/linux/x64/jdk/hotspot/normal/eclipse"
    ]
    def downloadUrl = jdkUrlMap[version]
    if (!downloadUrl) {
        error "No download URL defined for JDK version ${version}"
    }

    sh "curl -L -o jdk.tar.gz '${downloadUrl}'"
    sh "tar -xzf jdk.tar.gz"

    // Correctly capture the output of the find command
    def jdkDirName = sh(script: "find . -maxdepth 1 -type d -name '*jdk*'", returnStdout: true).trim()

    if (jdkDirName.isEmpty()) {
        error "Could not find extracted JDK directory."
    }

    // Return the absolute path
    return "${pwd()}/${jdkDirName}"
}

def installGradle(String version) {
    echo "--- Installing Gradle v${version} ---"

    // 2. Download the Gradle binary zip
    def downloadUrl = "https://services.gradle.org/distributions/gradle-${version}-bin.zip"
    sh "curl --fail -L -o gradle.zip '${downloadUrl}'"

    // 3. Unzip the archive
    sh "unzip gradle.zip"

    // 4. Find the name of the extracted directory
    def gradleDirName = sh(script: "find . -maxdepth 1 -type d -name 'gradle-*'", returnStdout: true).trim()
    if (gradleDirName.isEmpty()) {
        error "Could not find extracted Gradle directory."
    }

    // 5. Return the absolute path to the Gradle home directory
    def gradleHome = "${pwd()}/${gradleDirName}"
    echo "Gradle v${version} installed at: ${gradleHome}"
    return gradleHome
}

def cloneAndBuild(repoName, details, mvnHome) {
    withEnv(["PATH+MAVEN=${mvnHome}/bin"]) {
        echo "--- Starting process for ${repoName} ---"
        sh "java -version"
        sh "mvn -v"
        dir(repoName) {
            stage("Build & Upload & Scan Binaries for ${repoName}") {
                echo "Cloning from ${details.url}..."
                git url: details.url, branch: details.branch

                echo "Starting Maven build for ${repoName}..."
                sh 'mvn clean install -DskipTests'

                def jarFiles = findFiles(glob: 'target/**/*.jar')
                if (jarFiles.size() > 0) {
                    def zipFileName = "${repoName}-binaries.zip"
                    zip(zipFile: zipFileName, dir: 'target', glob: '**/*.jar')
                    echo "Successfully created ${zipFileName}"
                    sh "${builderPath} rt u '${zipFileName}' 'ecosys-dev-build-artifactory/plugins/dev/${formattedDate}/' --flat"
                    sh "${builderPath} scan '**/*.zip' --ant=true --watches ${watchName} --format=simple-json"
                }
                def zipFiles = findFiles(glob: 'target/*.zip')
                if (zipFiles.size() > 0) {
                    sh "jf rt u 'target/*.zip' 'ecosys-dev-build-artifactory/plugins/dev/${formattedDate}/' --flat"
                    sh "${builderPath} scan '**/*.zip' --ant=true --watches ${watchName} --format=simple-json"
                }
            }
        }
    }
}

def buildBinaryWithSpecificJDK(repoName, details, mvnHome, jdk8Path){
    if(details.jdk=="8" && details.type=="maven"){
        withEnv(["JAVA_HOME=${jdk8Path}", "PATH+JAVA=${jdk8Path}/bin"]) {
            cloneAndBuild(repoName, details, mvnHome)
        }
    } else if(details.jdk=="11" && details.type=="maven"){
        cloneAndBuild(repoName, details, mvnHome)
    }
}

def selectPlugins(Map reposMap) {
    def buildCauses = currentBuild.getBuildCauses()

    def timerCause = buildCauses.find { it instanceof hudson.triggers.TimerTrigger$TimerTriggerCause }
    if (!timerCause) {
        pluginSelectedForOnDemandScanning=pluginName
    } else {
        pluginSelectedForOnDemandScanning="all"
    }
}

def configRepo21() {
    withCredentials([
        // jfrog-ignore
        usernamePassword(credentialsId: 'repo21', usernameVariable: 'REPO21_USER', passwordVariable: 'REPO21_PASSWORD'),
        string(credentialsId: 'repo21-url', variable: 'REPO21_URL')
    ]) {
        sh "${builderPath} c add repo21 --url=${REPO21_URL} --user=${REPO21_USER} --password=${REPO21_PASSWORD} --overwrite"
        sh "${builderPath} c use repo21"
    }
}

def cleanupRepo21() {
    sh "${builderPath} c rm repo21 --quiet"
}